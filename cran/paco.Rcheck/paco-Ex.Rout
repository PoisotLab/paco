
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "paco"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "paco-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('paco')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PACo")
> ### * PACo
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PACo
> ### Title: Performs PACo/procustes analysis
> ### Aliases: PACo
> 
> ### ** Examples
> 
> data(gopherlice)
> require(ape)
Loading required package: ape
> gdist <- cophenetic(gophertree)
> ldist <- cophenetic(licetree)
> D <- prepare_paco_data(gdist, ldist, gl_links)
> D <- add_pcoord(D)
> D <- PACo(D, nperm=10, seed=42, method="r0")
Warning in vegan::procrustes(X = D$H_PCo, Y = D$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

Warning in vegan::procrustes(X = perm_paco$H_PCo, Y = perm_paco$P_PCo, symmetric = symmetric) :
  X has fewer axes than Y: X adjusted to comform Y

> print(D$gof)
$p
[1] 0

$ss
[1] 0.07310926

$n
[1] 10

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PACo", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:ape’

> nameEx("add_pcoord")
> ### * add_pcoord
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: add_pcoord
> ### Title: Principle coordinate analysis of phylogenies
> ### Aliases: add_pcoord
> 
> ### ** Examples
> 
> data(gopherlice)
> library(ape)
> gdist <- cophenetic(gophertree)
> ldist <- cophenetic(licetree)
> D <- prepare_paco_data(gdist, ldist, gl_links)
> D <- add_pcoord(D)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("add_pcoord", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:ape’

> nameEx("prepare_paco_data")
> ### * prepare_paco_data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: prepare_paco_data
> ### Title: Prepare the data Simple wrapper to make sure that the matrices
> ###   are sorted accordingly
> ### Aliases: prepare_paco_data
> 
> ### ** Examples
> 
> data(gopherlice)
> library(ape)
> gdist <- cophenetic(gophertree)
> ldist <- cophenetic(licetree)
> D <- prepare_paco_data(gdist, ldist, gl_links)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("prepare_paco_data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.891 0.041 1.946 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
